
Language Models

LM Jelinek-Mercer Smoothing and LM Dirichlet Smoothing

Web Search

13

Slides based on the books:






Overview

14

Application

Multimedia 

documents

User

Information 

analysis

Indexes

Ranking

Query

Documents

Indexing

Query

Results

Query 

processing

Crawler




























































































What is a language model?

• We can view a finite state automaton as a deterministic 

language model.

• I wish I wish I wish I wish . . .  Cannot generate: “wish I wish” 

or “I wish I”. 

• Our basic model: each document was generated by a 

different automaton like this except that these automata are 

probabilistic.

15

15




A probabilistic language model

• This is a one-state probabilistic finite-state automaton (a 

unigram LM) and the state emission distribution for its one 

state q1.

• STOP is not a word, but a special symbol indicating that the 

automaton stops.  

String = “frog said that toad likes frog STOP”

P(string) = 0.01 · 0.03 · 0.04 · 0.01 · 0.02 · 0.01 · 0.2= 0.0000000000048





16


A language model per document

String = “frog said that toad likes frog STOP”

P(string|Md1 ) = 0.01 · 0.03 · 0.04 · 0.01 · 0.02 · 0.01 · 0.02 = 0.0000000000048 = 4.8 · 10-12

P(string|Md2 ) = 0.01 · 0.03 · 0.05 · 0.02 · 0.02 · 0.01 · 0.02 = 0.0000000000120 = 12 · 10-12

P(string|Md1 ) &lt;  P(string|Md2 )

• Thus, document d2 is “more relevant” to the string “frog said that toad likes frog 

STOP” than d1 is.

17




Types of language models

• Unigrams:

• Bigrams:

• Multinomial distributions over words:

18

𝑝𝑢𝑛𝑖 𝑡1𝑡2𝑡3𝑡4 = 𝑝 𝑡1 𝑝 𝑡2 𝑝 𝑡3 𝑝 𝑡4

𝑝𝑏𝑖 𝑡1𝑡2𝑡3𝑡4 = 𝑝 𝑡1 𝑝 𝑡2|𝑡1 𝑝 𝑡3|𝑡2 𝑝 𝑡4|𝑡3

𝑝 𝑑 =

𝑙𝑑!

𝑓𝑡1,𝑑!𝑓𝑡2,𝑑! …𝑓𝑡𝑛,𝑑! 𝑝 𝑡1

𝑓𝑡1,𝑑𝑝 𝑡2

𝑓𝑡2,𝑑…𝑝 𝑡𝑛

𝑓𝑡𝑛,𝑑


Probability Ranking Principle (PRP)

• PRP in action: Rank all documents by 𝑝 𝑟 = 1|𝑞, 𝑑

• Theorem: Using the PRP is optimal, in that it minimizes the loss (Bayes risk) 

under 1/0 loss

• Provable if all probabilities correct, etc.  [e.g., Ripley 1996]

• Using odds, we reach a more convenient formulation of ranking :

19

𝑝 𝑟|𝑞, 𝑑 = 𝑝 𝑑, 𝑞 𝑟 𝑝(𝑟)

𝑝(𝑑, 𝑞)

O 𝑅 𝑞, 𝑑 = 𝑝 𝑟 = 1|𝑞, 𝑑

𝑝 𝑟 = 0|𝑞, 𝑑


Language models

• In language models, we do a different formulation towards 

the query posterior given the document as a model.

O 𝑅 𝑞, 𝑑 = 𝑝 𝑟 = 1|𝑞, 𝑑

𝑝 𝑟 = 0|𝑞, 𝑑 = 𝑝 𝑑, 𝑞 𝑟 = 1 𝑝 𝑟 = 1

𝑝 𝑑, 𝑞 𝑟 = 0 𝑝 𝑟 = 0

= 𝑝 𝑞 𝑑, 𝑟 𝑝 𝑑|𝑟 𝑝 𝑟

𝑝 𝑞 𝑑, ҧ𝑟 𝑝 𝑑| ҧ𝑟 𝑝

ҧ𝑟 ∝ log 𝑝 𝑞|𝑑, 𝑟 𝑝 𝑟|𝑑

𝑝 𝑞|𝑑, ҧ𝑟 𝑝

ҧ𝑟|𝑑

= log 𝑝(𝑞|𝑑, 𝑟) − log 𝑝 𝑞 𝑑, ҧ𝑟 + log 𝑝 𝑟|𝑑

𝑝

ҧ𝑟 𝑑

20


Language models

• The fist term computes the probability that the query has been 

generated by the document model

• The second term can measure the quality of the document with 

respect to other indicators not contained in the query (e.g. 

PageRank or number of links)

log 𝑝(𝑞|𝑑, 𝑟) − log 𝑝 𝑞 𝑑, ҧ𝑟 + log 𝑝 𝑟|𝑑

𝑝

ҧ𝑟 𝑑

≈ log 𝑝(𝑞|𝑑, 𝑟) + logit 𝑝 𝑟|𝑑

21


How to compute 𝑝 𝑞 𝑑 ?

• We will make the same conditional independence assumption as for 

Naive Bayes (we dropped the r variable)

• |q| length of query; 

• 𝑡𝑖 the token occurring at position i in the query

• This is equivalent to:

• 𝑡𝑓𝑡,𝑞 is the term frequency (# occurrences) of t in q

• Multinomial model (omitting constant factor) 

22

𝑝 𝑞 𝑀𝑑 =

ෑ

𝑡∈ 𝑞∩𝑑

𝑝 𝑡 𝑀𝑑

𝑡𝑓𝑡,𝑞

𝑝 𝑞 𝑀𝑑 = ෑ

𝑖=0

|𝑞|

𝑝 𝑡𝑖 𝑀𝑑


Parameter estimation

• The parameters 𝑝 𝑡 𝑀𝑑 are obtained from the document data as the 

maximum likelihood estimate:

• A single t with 𝑝 𝑡 𝑀𝑑 = 0 will make 𝑝 𝑞 𝑀𝑑 = ς 𝑝 𝑡 𝑀𝑑 zero.

• This can be smoothed with the prior knowledge we have about the 

collection.

23

𝑝 𝑡 𝑀𝑑

𝑚𝑙 = 𝑓𝑡,𝑑

|𝑑|


Smoothing

• Key intuition: A non-occurring term is possible (even though it didn’t 

occur), . . .

. . . but no more likely than would be expected by chance in the collection.

• The maximum likelihood language model 𝑀𝐶

𝑚𝑙 based on the term 

frequencies in the collection as a whole:

• 𝑙𝑡 is the number of times the term shows up in the collection

• 𝑙𝐶 is the number of terms in the whole collection.

• We will use 𝑝 𝑡 𝑀𝐶

𝑚𝑙 to “smooth” 𝑝 𝑡 𝑑 away from zero. 

24

𝑝 𝑡 𝑀𝐶

𝑚𝑙 = 𝑙𝑡

𝑙𝐶


LM with Jelineck-Mercer smoothing

• The first approach we can do is to create a mixture model with both 

distributions:

• Mixes the probability from the document with the general collection 

frequency of the word.

• High value of λ: “conjunctive-like” search – tends to retrieve documents 

containing all query words.

• Low value of λ: more disjunctive, suitable for long queries

• Correctly setting λ is very important for good performance.

25

𝑝 𝑞 𝑑, 𝐶 = 𝜆 ∙ 𝑝 𝑞 𝑀𝑑 + 1 − 𝜆 ∙ 𝑝 𝑞 𝑀𝑐


Mixture model: Summary

• What we model: The user has some background knowledge about the 

collection and has a “document in mind” and generates the query from 

this document.

• The equation represents the probability that the document that the 

user had in mind was in fact this one.

26

𝑝 𝑞 𝑑, 𝐶 ≈

ෑ

𝑡∈{𝑞∩𝑑}

𝜆 ∙ 𝑝 𝑡 𝑀𝑑 + 1 − 𝜆 ∙ 𝑝 𝑡 𝑀𝑐


LM with Dirichlet smoothing

• We can use the prior knowledge about the mean of each term.

• The mean of the term in the collection should be our starting point 

when computing the term average on a document:

• Imagine that we can add a fractional number occurrences to each term 

frequency.

• Add 𝜇 = 1000 occurrences of terms to a document according to the 

collection distribution.

• The frequency of each term 𝑡𝑖 would increase 𝜇 ∙ 𝑀𝑐(𝑡𝑖)

• The length of each document increases by 1000.

• This will change the way we compute the mean of a term on a 

document.

27


Dirichlet smoothing

• We end up with the maximum a posteriori estimate of the term 

average:

• This is equivalent to using a Dirichlet prior with appropriate parameters.

• The ranking function becomes:

28

𝑝 𝑡 𝑀𝑑

𝑀𝐴𝑃 = 𝑓𝑡,𝑑 + 𝜇 ∙ 𝑀𝑐(𝑡)

𝑑 + 𝜇

𝑝 𝑞 𝑑 = ෑ

𝑡∈𝑞

𝑓𝑡,𝑑 + 𝜇 ∙ 𝑀𝑐 𝑡

𝑑 + 𝜇

𝑞𝑡


Experimental comparison

TREC45

Gov2

1998

1999

2005

2006

Method

P@10

MAP

P@10

MAP

P@10

MAP

P@10

MAP

Binary

0.256

0.141

0.224

0.148

0.069

0.050

0.106

0.083

2-Poisson

0.402

0.177

0.406

0.207

0.418

0.171

0.538

0.207

BM25

0.424

0.178

0.440

0.205

0.471

0.243

0.534

0.277

LMJM

0.390

0.179

0.432

0.209

0.416

0.211

0.494

0.257

LMD

0.450

0.193

0.428

0.226

0.484

0.244

0.580

0.293

BM25F

0.482

0.242

0.544

0.277

BM25+PRF

0.452

0.239

0.454

0.249

0.567

0.277

0.588

0.314

RRF

0.462

0.215

0.464

0.252

0.543

0.297

0.570

0.352

LR

0.446

0.266

0.588

0.309

RankSVM

0.420

0.234

0.556

0.268

29


Experimental comparison

• For long queries, the Jelinek-Mercer smoothing performs better than 

the Dirichlet smoothing. 

• For short queries, the Dirichlet smoothing performs better than the 

Jelinek-Mercer smoothing.

30

Chengxiang Zhai and John Lafferty. 2004. A study of smoothing methods for language models 

applied to information retrieval. ACM Trans. Inf. Syst. 22, 2 (April 2004), 179-214.

Method

Query

AP

Prec@10

Prec@20

LMJM

Title

0.227

0.323

0.265

LMD

Title

0.256

0.352

0.289

LMJM

Long

0.280

0.388

0.315

LMD

Long

0.279

0.373

0.303


Summary

• Language Models 

• Jelinek-Mercer smoothing 

• Dirichlet smoothing

• Both models need to estimate one single parameter from the whole 

collection

• (although there are known values that work well).

• References:

Chapter 12

Sections 9.1, 9.2 and 9.3

31





