


Ranking with Large Margin Principle: Two 

Approaches* 

Amnon Shashua 

School of CS&amp;E 

Hebrew University of Jerusalem 

Jerusalem 91904, Israel 

email: shashua@cs.huji.ac.il 

Anat Levin 

School of CS&amp;E 

Hebrew University of Jerusalem 

Jerusalem 91904, Israel 

email: alevin@cs.huji.ac.il 

Abstract 

We discuss the problem of ranking k instances with the use of a "large 

margin" principle. We introduce two main approaches: the first is the 

"fixed margin" policy in which the margin of the closest neighboring 

classes is being maximized -

which turns out to be a direct generaliza-

tion of SVM to ranking learning. The second approach allows for k - 1 

different margins where the sum of margins is maximized. This approach 

is shown to reduce to lI-SVM when the number of classes k = 2. Both 

approaches are optimal in size of 21 where I is the total number of training 

examples. Experiments performed on visual classification and "collab-

orative filtering" show that both approaches outperform existing ordinal 

regression algorithms applied for ranking and multi-class SVM applied 

to general multi-class classification. 

1 Introduction 

In this paper we investigate the problem of inductive learning from the point of view of 

predicting variables of ordinal scale [3, 7,5], a setting referred to as ranking learning or 

ordinal regression. We consider the problem of applying the large margin principle used 

in Support Vector methods [12, 1] to the ordinal regression problem while maintaining an 

(optimal) problem size linear in the number of training examples. 

Let x{ be the set of training examples where j = 1, ... , k denotes the class number, and 

i = 1, ... , ij is the index within each class. Let I = 2:j ij be the total number of training 

examples. A straight-forward generalization of the 2-c1ass separating hyperplane problem, 

where a single hyperplane determines the classification rule, is to define k - 1 separating 

hyperplanes which would separate the training data into k ordered classes by modeling the 

ranks as intervals on the real line -

an idea whose origins are with the classical cumulative 

model [9], see also [7,5]. The geometric interpretation of this approach is to look for k - 1 

parallel hyperplanes represented by vector w E Rn (the dimension of the input vectors) 

and scalars bl :::; ... :::; bk- I defining the hyperplanes (w, bd, ... , (w, bk-d, such that the 

'This work was done while A.S. was spending his sabbatical at the computer science department 

of Stanford University. 




2 

Iwl 

~~ 

.... 

. 

: ~ 

~ " 

maximize the mf~in 

(w·o) 

Fixed-margin 

~ 

~ 

Iwl 

Iwl 

Sum-oj-margins 

Figure 1: Lefthand display: fi xed-margin policy for ranking learning. The margin to be maximized 

is associated with the two closest neighboring classes. As in conventional SVM, the margin is pre-

scaled to be equal to 2/lwl thus maximizing the margin is achieved by minimizing w·w. The support 

vectors lie on the boundaries between the two closest classes. Righthand display: sum-of-margins 

policy for ranking learning. The objective is to maximize the sum of k - 1 margins. Each class is 

sandwiched between two hyperplanes, the norm of w is set to unity as a constraint in the optimization 

problem and as a result the objective is to maximize I:j (bj - aj). In this case, the support vectors lie 

on the boundaries among all neighboring classes (unlike the fi xed-margin policy). When the number 

of classes k = 2, the dual functional is equivalent to v-SVM. 

data are separated by dividing the space into equally ranked regions by the decision rule 

f (x) = 

min {r: w . x - br &lt; O}. 

rE{l , ... ,k} 

(1) 

In other words, all input vectors x satisfying br - 1 &lt; w . x &lt; br are assigned the rank 

r (using the convention that bk = (0). For instance, recently [5] proposed an "on-line" 

algorithm (with similar principles to the classic "perceptron" used for 2-class separation) 

for finding the set of parallel hyperplanes which would comply with the separation rule 

above. 

To continue the analogy to 2-class learning, in addition to the separability constraints on 

the variables 0: = {w, b1 :S ... :S bk-d one would like to control the tradeoff between 

lowering the "empirical risk" Remp(O:) (error measure on the training set) and lowering 

the "confidence interval" 1J&gt;(0:, h) controlled by the VC-dimension h of the set of loss 

functions. The "structural risk minimization" (SRM) principle [12] minimizes a bound 

on the risk over a structure on the set of functions. The geometric interpretation for 2-class 

learning is to maximize the margin between the boundaries of the two sets [12, 1]. 

In our setting of ranking learning, there are k - 1 margins to consider, thus there are two 

possible approaches to take on the "large margin" principle for ranking learning: 

"fixed margin" strategy: the margin to be maximized is the one defined by the closest 

(neighboring) pair of classes. Formally, let w, bq be the hyperplane separating the two 

pairs of classes which are the closest among all the neighboring pairs of classes. Let w , bq 

be scaled such the distance of the boundary points from the hyperplane is 1, i.e., the margin 

between the classes q, q + 1 is 2/lwl (see Fig. 1, lefthand display). Thus, the fixed margin 

policy for ranking learning is to find the direction wand the scalars b1 , ... , bk - 1 such that 

w . w is minimized (i.e., the margin between classes q, q + 1 is maximized) subject to the 

separability constraints (modulo margin errors in the non-separable case). 

"sum of margins" strategy: the sum of all k - 1 margins are to be maximized. In this case, 

the margins are not necessarily equal (see Fig. 1, righthand display). Formally, the ranking 




rule employs a vector w, Iwi = 1, and a set of 2(k - 1) thresholds ai ::::; bi ::::; a2 ::::; b2 ::::; 

... ::::; ak-i ::::; bk- i such that w . x{ ::::; aj and w . x{+i 2:: bj for j = 1, ... , k - 1. In 

other words, all the examples of class 1 ::::; j ::::; k are "sandwiched" between two parallel 

hyperplanes (w,aj) and (w, bj- t}, where bo = -00 and ak = 00. The k - 1 margins are 

therefore (bj - aj) and the large margin principle is to maximize Lj (bj - aj) subject to 

the separability constraints above. 

It is also fairly straightforward to apply the SRM principle and derive the bounds on the 

actual risk functional -

see [11] for details. 

In the remainder of this paper we will introduce the algorithmic implications of these two 

strategies for implementing the large margin principle for ranking learning. The fixed-

margin principle will turn out to be a direct generalization of the Support Vector Machine 

(SYM) algorithm -

in the sense that substituting k = 2 in our proposed algorithm would 

produce the dual functional underlying conventional SVM.1t is interesting to note that the 

sum-of-margins principle reduces to v-SVM (introduced by [10] and later [2]) when k = 2. 

2 Fixed Margin Strategy 

Recall that in the fixed margin policy (w, bq ) is a "canonical" hyperplane normalized such 

that the margin between the closest classes q, q + 1 is 2/llwll. The index q is of course 

unknown. The unknown variables w, bi 

::::; ... ::::; bk - i (and the index q) could be solved 

in a two-stage optimization problem: a Quadratic Linear Programming (QLP) formulation 

followed by a Linear Programming (LP) formulation. 

The (primal) QLP formulation of the ("soft margin") fixed-margin policy for ranking learn-

ing takes the form: 

~w . w + c l: l: (E{ + &lt;j+1) 

i 

j 

subject to 

w·xj -b &lt; -l+c:j 

• 

J -

.' 

w . xj+1 - b· &gt; 1 -

c:~j+1 

l 

J -

t' 

c:j &gt; 0 c:*j &gt; 0 

't 

-

, 

't 

-

(2) 

(3) 

(4) 

(5) 

where j = 1, ... , k - 1 and i = 1, ... , i j , and C is some predefined constant. The scalars c:{ 

and &lt;j+1 are positive for data points which are inside the margins or placed on the wrong 

side of the respective hyperplane. Since the margin is maximized while maintaining sepa-

rability, it will be governed by the closest pair of classes because otherwise the separability 

conditions would cease to hold (modulo the choice of the constant C which would tradeoff 

the margin size with possible margin errors -

but that is discussed later). 

The solution to this optimization problem is given by the saddle point of the Lagrange 

functional (Lagrangian): 

L(·) 

~w. w + CI: (c:{ + &lt;Hi) + I:A{(W' x{ - bj + 1- c:{) 

i,j 

i,j 

i,j 

h 

. -

1 

k 

l' -

1 

. 

d rj r*j+i d 

d 

II 

. 

L 

were J -

, ... , 

-

,Z -

, ••• , Zj, an 

'&gt;i' '&gt;i 

,Ai' Ui are a non-negattve agrange 

multipliers. Since the primal problem is convex, there exists a strong duality between the 

primal and dual optimization functions. By first minimizing the Lagrangian with respect 




to w, bj , fi, f;j+1 we obtain the dual optimization function which then must be maximized 

with respect to the Lagrange multipliers. From the minimization of the Lagrangian with 

respect to w we obtain: 

w = - '" 

)..~x~ + '" 8j x j +1 

L...-t 

't 

't 

L...-t 

'I. 

't 

(6) 

i,j 

i,j 

That is, the direction w of the parallel hyperplanes is described by a linear combination 

of the support vectors x associated with the non-vanishing Lagrange multipliers. From the 

Kuhn-Tucker theorem the support vectors are those vectors for which equality is achieved 

in the inequalities (3,4). These vectors lie on the two boundaries between the adjacent 

classes q, q + 1 (and other adjacent classes which have the same margin). From the mini-

mization of the Lagrangian with respect to bj we obtain the constraint: 

(7) 

and the minimization with respect to fi and &lt;H1 yields the constraints: 

C -

)..j -

rj = 0 

C - 8j -

r~H1 = 0 

't 

':,'1.' 

't 

"::.'1. 

(8) 

which in turn gives rise to the constraints 0 :s )..i :S C where )..i = C if the corresponding 

data point is a margin error «(1 = 0, thus from the Kuhn-Tucker theorem f{ &gt; 0), and 

likewise for 8{. Note that a data point can count twice as a margin error -

once with 

respect to the class on its "left" and once with respect to the class on its "right". 

For the sake of presenting the dual functional in a compact form, we will introduce some 

new notations. Let X j be the n x ij matrix whose columns are the data points xi, 

i = 1, ... , ij. Let )..j = ()..I, ... ,)..i.) T be the vector whose components are the Lagrange 

, 

multipliers )..{ corresponding to class j. Likewise, let 8j = (8{, ... , 8f) T be the Lagrange 

, 

multipliers 8! corresponding to class j + 1. Let fL = (P, ... , )..k-1, 81 , ... , 8k- 1) T be the 

vector holding all the )..! and 8! Lagrange multipliers, and let fL1 = (fLL ... , fLL1) T = 

()..1, ... , )..k-1) T and fL2 = (fLr, ... , fLL1) T = (81, ... , 8k- 1) T the first and second halves of 

fL. Note that fL] = )..j is a vector, and likewise so is fL3 = 8j . Let 1 be the vector of 1 's, and 

finally, let Q be the matrix holding two copies of the training data: 

(9) 

where N = 2l - i1 - ik' For example, (6) becomes in the new notations w 

QfL. 

By substituting the expression for w = QfL back into the Lagrangian and taking into 

account the constraints (7,8) one obtains the dual functional which should be maximized 

with respect to the Lagrange multipliers fLi: 

max 

{! 

i= l 

subject to 

o :S fLi :S C 

i = 1, ... , N 

1· fLJ = 1 . fL] 

j = 1, ... , k - 1 

(10) 

(11) 

(12) 

Note that k = 2, i.e., we have only two classes thus the ranking learning problem is equiv-

alent to the 2-class classification problem, the dual functional reduces and becomes equiv-

alent to the dual form of conventional SVM. In that case (QT Q)ij = YiYjXi . Xj where 

Yi, Yj = ±1 denoting the class membership. 




Also worth noting is that since the dual functional is a function of the Lagrange multipliers 

&gt;-.{ and 5{ alone, the problem size (the number of unknown variables) is equal to twice the 

number of training examples -

precisely N = 2l-il -ik where l is the number oftraining 

examples. This favorably compares to the O(l2) required by the recent SYM approach to 

ordinal regression introduced in [7] or the kl required by the general multi-class approach 

to SYM [4,8]. 

Further note that since the entries of Q T Q are the inner-products of the training examples, 

they can be represented by the kernel inner-product in the input space dimension rather than 

by inner-products in the feature space dimension. The decision rule, in this case, given a 

new instance vector x would be the rank r corresponding to the first smallest threshold br 

for which 

support vector s 

support vectors 

where K(x, y) = ¢&gt;(x) . ¢&gt;(y) replaces the inner-products in the higher-dimensional "fea-

ture" space ¢&gt;(x). 

Finally, from the dual form one can solve for the Lagrange multipliers J-Li and in turn obtain 

w = QJ-L the direction of the parallel hyperplanes. The scalar bq (separating the adjacent 

classes q, q + 1 which are the closest apart) can be obtained from the support vectors, but 

the remaining scalars bj cannot. Therefore an additional stage is required which amounts 

to a Linear Programming problem on the original primal functional (2) but this time w is 

already known (thus making this a linear problem instead of a quadratic one). 

3 Sum-of-Margins Strategy 

In this section we propose an alternative large-margin policy which allows for k - 1 mar-

gins where the criteria function maximizes the sum of them. The challenge in formulating 

the appropriate optimization functional is that one cannot adopt the "pre-scaling" of w ap-

proach which is at the center of conventional SYM formulation and of the fixed-margin 

policy for ranking learning described in the previous section. 

The approach we take is to represent the primal functional using 2(k -

1) parallel hy-

perplanes instead of k - 1. Each class would be "sandwiched" between two hyperplanes 

(except the first and last classes). Formally, we seek a ranking rule which employs a vector 

wand a set of 2(k -

1) thresholds al :::; b1 :::; a2 :::; b2 :::; ... :::; ak-l :::; bk- 1 such 

that w . x{ :::; aj and w . X{+l ::::: bj for j = 1, ... , k - 1. In other words, all the exam-

ples of class 1 :::; j :::; k are "sandwiched" between two parallel hyperplanes (w, aj) and 

(w, bj- d, where bo = -00 and ak = 00. 

The margin between two hyperplanes separating class j and j + 1 is: (bj - aj) / JTIWTI. 

Thus, by setting the magnitude of w to be of unit length (as a constraint in the optimization 

problem), the margin which we would like to maximize is Lj(bj - aj) for j = 1, ... , k-1 

which we can formulate in the following primal QLP (see also Fig. 1, righthand display): 

k-l 

min 

2)aj - bj ) + C 2: 2: (f{ + f;j+l) 

j =l 

i 

j 

subject to 

aj :::; bj , 

bj:::;aj+l, 

j=1, ... , k-2 

w· x j &lt; a· + fj 

b· - f*j+l &lt; w· x j+! 

• -

J 

., 

J 

• 

-

., 

w . w &lt; 1 fj &gt; 0 f*j+! &gt; 0 

-, 2-'1, 

-

(13) 

(14) 

(15) 

(16) 

(17) 




where j = 1, ... , k - 1 (unless otherwise specified) and i = 1, ... , ij, and C is some prede-

fined constant (whose physical role would be explained later). Note that the (non-convex) 

constraint w . w = 1 is replaced by the convex constraint w . w ::; 1 since it can be shown 

that the optimal solution w* would have unit magnitude in order to optimize the objective 

function (see [11] for details). We will proceed to derive the dual functional below. 

The Lagrangian takes the following form: 

k- 2 

L(·) 

l)aj - bj ) + C L (e1 + &lt;HI) + L ~j(aj - bj ) + L 1}j(bj - aHd 

j 

i ,j 

j 

j = 1 

+ L A1(w . x1- aj - e1) + L 61(bj - e:j +! - w · xi+!) 

i,j 

i ,j 

+ a(w· w -1) - L (lei - L (i*H1e? 

i ,j 

i,j 

where j 

1, ... , k -

1 (unless otherwise specified), i 

1, ... , ij , and 

~j, 1}j, a, (1, Cj , Ai, 61 are all non-negative Lagrange multipliers. Due to lack of space 

we will omit further derivations (those can be found in [11]) and move directly to the dual 

functional which takes the following form: 

max 

J.L 

subject to 

o ::; f.1i ::; C 

i = 1, ... , N 

1 . f.1~ ;::: 1, 1· f.1Ll ;::: 1 

1· f.11 = 1 . f.12 

(18) 

(19) 

(20) 

(21) 

where Q and f.1 are defined in the previous section. The direction w is represented by the 

linear combination of the support vectors: w = Qf.1/IIQf.111 where, following the Kuhn-

Tucker theorem, f.1i &gt; 0 for all vectors on the boundaries between the adjacent pairs of 

classes and margin errors. In other words, the vectors x associated with non-vanishing f.1i 

are those which lie on the hyperplanes or vectors tagged as margin errors. Therefore, all 

the thresholds aj, bj can be recovered from the support vectors -

unlike the fixed-margin 

scheme which required another LP pass. 

The dual functional (18) is similar to the dual functional (10) but with some crucial differ-

ences: (i) the quadratic criteria functional is homogeneous, and (ii) constraints (20) lead 

to the constraint L:i f.1i ;::: 2. These two differences are also what distinguishes between 

conventional SVM and v-SVM for 2-class learning proposed recently by [10]. Indeed, if 

we set k = 2 in the dual functional (18) we would be able to conclude that the two dual 

functionals are identical (by a suitable change of variables). Therefore, the role of the con-

stant C complies with the findings of [10] by controlling the tradeoff between the number 

of margin errors and support vectors and the size of the margins: 2/ N ::; C ::; 2 such that 

when C = 2 a single margin error is allowed (otherwise a duality gap would occur) and 

when C = 2/N all vectors are allowed to become margin errors and support vectors (see 

[11] for a detailed discussion on this point). 

In the general case of k &gt; 2 classes (in the context of ranking learning) the role of the 

constant C carries the same meaning: C::; 2(k - 1)/#m.e. where #m.e. stand for "total 

number of margin errors", thus 

2(k;; 1) ::; C ::; 2(k _ 1). 

Since a data point can can count twice for a margin error, the total number of margin errors 

in the worst case is N = 2l - il - ik where l is the total number of data points. 




'" .. ~ ~-

o~ 

1~ 

I~ * 

~ 

~ 

Figure 2: The results of the fi xed-margin principle plotted against the results of PRank of [5] which 

does not use a large-margin principle. The average error of PRank is about 1.25 compared to 0.7 with 

the fi xed-margin algorithm. 

4 Experiments 

Due to lack of space we describe only two sets of experiments we conducted on a "collabo-

rative filtering" problem and visual data ranking. More details and further experiments are 

reported in [11]. 

In general, the goal in collaborative filtering is to predict a person's rating on new items 

such as movies given the person's past ratings on similar items and the ratings of other 

people of all the items (including the new item). The ratings are ordered, such as "highly 

recommended", "good" , ... , "very bad" thus collaborative filtering falls naturally under the 

domain of ordinal regression (rather than general multi-class learning). 

The "EachMovie" dataset [6] contains 1628 movies rated by 72,916 people arranged as a 

2D array whose columns represent the movies and the rows represent the users -

about 

5% of the entries of this array are filled-in with ratings between 0, ... ,6 totaling 2,811,983 

ratings. Given a new user, the ratings of the user on the 1628 movies (not all movies would 

be rated) form the Yi and the i'th column of the array forms the Xi which together form the 

training data (for that particular user). Given a new movie represented by the vector x of 

ratings of all the other 72,916 users (not all the users rated the new movie), the learning 

task is to predict the rating f (x) of the new user. Since the array contains empty entries, the 

ratings were shifted by -3.5 to have the possible ratings {-2.5, -1.5, -0.5, 0.5,1.5, 2.5} 

which allows to assign the value of zero to the empty entries of the array (movies which 

were not rated). 

For the training phase we chose users which ranked about 450 movies and selected a subset 

{50, 100, ... , 300} of those movies for training and tested the prediction on the remaining 

movies. We compared our results (collected over 100 runs) -

the average distance be-

tween the correct rating and the predicted rating -

to the best "on-line" algorithm of [5] 

called "PRank" (there is no use of large margin principle). In their work, PRank was com-

pared to other known on-line approaches and was found to be superior, thus we limited our 

comparison to PRank alone. Attempts to compare our algorithms to other known ranking 

algorithms which use a large-margin principle ([7], for example) were not successful since 

those square the training set size which made the experiment with the Eachmovie dataset 

untractable computationally. 

The graph in Fig. 2 shows that the large margin principle makes a significant difference on 

the results compared to PRank. The results we obtained with PRank are consistent with 

the reported results of [5] (best average error of about 1.25), whereas our fixed-margin 

algorithm provided an average error of about 0.7). 

We have applied our algorithms to classification of "vehicle type" to one of three classes: 

"small" (passenger cars), "medium" (SUVs, minivans) and "large" (buses, trucks). There 




Figure 3: Classifi cation of vehicle type: Small, Medium and Large (see text for details). 

is a natural order Small, Medium, Large since making a mistake between Small and Large 

is worse than confusing Small and Medium, for example. We compared the classification 

error (counting the number of miss-classifications) to general multi-class learning using 

pair-wise SVM. The error over a test set of about 14,000 pictures was 20% compared to 

25% when using general multi-class SVM. We also compared the error (averaging the 

difference between the true rank {I, 2,3} and the predicted rank using 2nd-order kernel) to 

PRank. The average error was 0.216 compared to 1.408 with PRank. Fig. 3 shows a typical 

collection of correctly classified and incorrectly classified pictures from the test set. 

References 

[1] B.E. Boser, LM. Guyon, and V.N. Vapnik. A training algorithm for optimal margin classifers. 

In Proc. of the 5th ACM Workshop on Computational Learning Theory, pages 144-152. ACM 

Press, 1992. 

[2] C.C. Chang and C.J. Lin. Training v-Support Vector classifi ers: Theory and Algorithms. In 

Neural Computations, 14(8),2002. 

[3] W.W. Cohen, R.E. Schapire, and Y. Singer. Learning to order things. lournal of Artificial 

Intelligence Research (lAIR), 10:243-270, 1999. 

[4] K. Crammer and Y. Singer. On the algorithmic implementation of multiclass kernel-based 

vector machines. lournal of Machine Learning Research, 2:265-292, 2001. 

[5] K. Crammer and Y. Singer. Pranking with ranking. In Proceedings of the conference on Neural 

Information Processing Systems (NIPS), 2001. 

[6] http://www.research.compaq.comlSRC/eachmovie/ . 

[7] R. Herbrich, T. Graepel, and K. Obermayer. Large margin rank boundaries for ordinal regres-

sion. Advances in Large Margin Classifi ers, 2000. pp. 115-132. 

[8] Y. Lee, Y. Lin, and G. Wahba. Multicategory support vector machines. Technical Report 1043, 

Univ. of Wisconsin, Dept. of Statistics, Sep. 2001. 

[9] P. McCullagh and J. A. NeIder. Generalized Linear Models. Chapman and Hall, London, 2nd 

edition edition, 1989. 

[10] B. Scholkopf, A. Smola, R.C. Williamson, and P.L. Bartless. New support vector algorithms. 

Neural Computation, 12:1207-1245, 2000. 

[11] A. Shashua and A. Levin. Taxonomy of Large Margin Principle Algorithms for Ordinal Regres-

sion Problems. Technical Report 2002-39, Leibniz Center for Research, School of Computer 

Science and Eng., the Hebrew University of Jerusalem. 

[12] V.N. Vapnik. The nature of statistical learning. Springer, 2nd edition, 1998. 

[13] J. Weston and C. Watkins. Support vector machines for multi-class pattern recognition. In Proc. 

of the 7th European Symposium on Artificial Neural Networks, April 1999. 

