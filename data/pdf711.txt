
Understanding LSTM Networks

Understanding LSTM Networks

Posted on August 27, 2015

Posted on August 27, 2015

Recurrent Neural Networks

Humans don’t start their thinking from scratch every second. As you read this essay, you understand each

Humans don’t start their thinking from scratch every second. As you read this essay, you understand each

word based on your understanding of previous words. You don’t throw everything away and start thinking

word based on your understanding of previous words. You don’t throw everything away and start thinking

from scratch again. Your thoughts have persistence.

from scratch again. Your thoughts have persistence.

Traditional neural networks can’t do this, and it seems like a major shortcoming. For example, imagine you

Traditional neural networks can’t do this, and it seems like a major shortcoming. For example, imagine you

want to classify what kind of event is happening at every point in a movie. It’s unclear how a traditional

want to classify what kind of event is happening at every point in a movie. It’s unclear how a traditional

neural network could use its reasoning about previous events in the film to inform later ones.

neural network could use its reasoning about previous events in the film to inform later ones.

Recurrent neural networks address this issue. They are networks with loops in them, allowing information to

Recurrent neural networks address this issue. They are networks with loops in them, allowing information to

persist.

persist.



Recurrent Neural Networks have loops.

In the above diagram, a chunk of neural network,

In the above diagram, a chunk of neural network,

A, looks at some input

, looks at some input

xt and outputs a value

 and outputs a value

ht. A loop allows information to be passed from one step of the network to the next.

. A loop allows information to be passed from one step of the network to the next.

These loops make recurrent neural networks seem kind of mysterious. However, if you think a bit more, it

These loops make recurrent neural networks seem kind of mysterious. However, if you think a bit more, it

turns out that they aren’t all that different than a normal neural network. A recurrent neural network can be

turns out that they aren’t all that different than a normal neural network. A recurrent neural network can be

thought of as multiple copies of the same network, each passing a message to a successor. Consider what

thought of as multiple copies of the same network, each passing a message to a successor. Consider what

happens if we unroll the loop:

happens if we unroll the loop:



An unrolled recurrent neural network.

This chain-like nature reveals that recurrent neural networks are intimately related to sequences and lists.

This chain-like nature reveals that recurrent neural networks are intimately related to sequences and lists.

colah's blog

colah's blog


They’re the natural architecture of neural network to use for such data.

They’re the natural architecture of neural network to use for such data.

And they certainly are used! In the last few years, there have been incredible success applying RNNs to a

And they certainly are used! In the last few years, there have been incredible success applying RNNs to a

variety of problems: speech recognition, language modeling, translation, image captioning… The list goes on.

variety of problems: speech recognition, language modeling, translation, image captioning… The list goes on.

I’ll leave discussion of the amazing feats one can achieve with RNNs to Andrej Karpathy’s excellent blog

I’ll leave discussion of the amazing feats one can achieve with RNNs to Andrej Karpathy’s excellent blog

post, 

post, The Unreasonable Effectiveness of Recurrent Neural Networks

The Unreasonable Effectiveness of Recurrent Neural Networks. But they really are pretty amazing.

. But they really are pretty amazing.

Essential to these successes is the use of “LSTMs,” a very special kind of recurrent neural network which

Essential to these successes is the use of “LSTMs,” a very special kind of recurrent neural network which

works, for many tasks, much much better than the standard version. Almost all exciting results based on

works, for many tasks, much much better than the standard version. Almost all exciting results based on

recurrent neural networks are achieved with them. It’s these LSTMs that this essay will explore.

recurrent neural networks are achieved with them. It’s these LSTMs that this essay will explore.

The Problem of Long-Term Dependencies

One of the appeals of RNNs is the idea that they might be able to connect previous information to the

One of the appeals of RNNs is the idea that they might be able to connect previous information to the

present task, such as using previous video frames might inform the understanding of the present frame. If

present task, such as using previous video frames might inform the understanding of the present frame. If

RNNs could do this, they’d be extremely useful. But can they? It depends.

RNNs could do this, they’d be extremely useful. But can they? It depends.

Sometimes, we only need to look at recent information to perform the present task. For example, consider a

Sometimes, we only need to look at recent information to perform the present task. For example, consider a

language model trying to predict the next word based on the previous ones. If we are trying to predict the

language model trying to predict the next word based on the previous ones. If we are trying to predict the

last word in “the clouds are in the 

last word in “the clouds are in the sky

sky,” we don’t need any further context – it’s pretty obvious the next word

,” we don’t need any further context – it’s pretty obvious the next word

is going to be sky. In such cases, where the gap between the relevant information and the place that it’s

is going to be sky. In such cases, where the gap between the relevant information and the place that it’s

needed is small, RNNs can learn to use the past information.

needed is small, RNNs can learn to use the past information.



But there are also cases where we need more context. Consider trying to predict the last word in the text “I

But there are also cases where we need more context. Consider trying to predict the last word in the text “I

grew up in France… I speak fluent 

grew up in France… I speak fluent French

French.” Recent information suggests that the next word is probably the

.” Recent information suggests that the next word is probably the

name of a language, but if we want to narrow down which language, we need the context of France, from

name of a language, but if we want to narrow down which language, we need the context of France, from

further back. It’s entirely possible for the gap between the relevant information and the point where it is

further back. It’s entirely possible for the gap between the relevant information and the point where it is

needed to become very large.

needed to become very large.

Unfortunately, as that gap grows, RNNs become unable to learn to connect the information.

Unfortunately, as that gap grows, RNNs become unable to learn to connect the information.



In theory, RNNs are absolutely capable of handling such “long-term dependencies.” A human could carefully

In theory, RNNs are absolutely capable of handling such “long-term dependencies.” A human could carefully

pick parameters for them to solve toy problems of this form. Sadly, in practice, RNNs don’t seem to be able

pick parameters for them to solve toy problems of this form. Sadly, in practice, RNNs don’t seem to be able

to learn them. The problem was explored in depth by 

to learn them. The problem was explored in depth by Hochreiter (1991) [German]

Hochreiter (1991) [German] and 

 and Bengio, et al. (1994)

Bengio, et al. (1994),,




who found some pretty fundamental reasons why it might be difficult.

who found some pretty fundamental reasons why it might be difficult.

Thankfully, LSTMs don’t have this problem!

Thankfully, LSTMs don’t have this problem!

LSTM Networks

Long Short Term Memory networks – usually just called “LSTMs” – are a special kind of RNN, capable of

Long Short Term Memory networks – usually just called “LSTMs” – are a special kind of RNN, capable of

learning long-term dependencies. They were introduced by 

learning long-term dependencies. They were introduced by Hochreiter &amp; Schmidhuber (1997)

Hochreiter &amp; Schmidhuber (1997), and were

, and were

refined and popularized by many people in following work.

refined and popularized by many people in following work.  They work tremendously well on a large variety

 They work tremendously well on a large variety

of problems, and are now widely used.

of problems, and are now widely used.

LSTMs are explicitly designed to avoid the long-term dependency problem. Remembering information for

LSTMs are explicitly designed to avoid the long-term dependency problem. Remembering information for

long periods of time is practically their default behavior, not something they struggle to learn!

long periods of time is practically their default behavior, not something they struggle to learn!

All recurrent neural networks have the form of a chain of repeating modules of neural network. In standard

All recurrent neural networks have the form of a chain of repeating modules of neural network. In standard

RNNs, this repeating module will have a very simple structure, such as a single tanh layer.

RNNs, this repeating module will have a very simple structure, such as a single tanh layer.



The repeating module in a standard RNN contains a single layer.

LSTMs also have this chain like structure, but the repeating module has a different structure. Instead of

LSTMs also have this chain like structure, but the repeating module has a different structure. Instead of

having a single neural network layer, there are four, interacting in a very special way.

having a single neural network layer, there are four, interacting in a very special way.



The repeating module in an LSTM contains four interacting layers.

Don’t worry about the details of what’s going on. We’ll walk through the LSTM diagram step by step later.

Don’t worry about the details of what’s going on. We’ll walk through the LSTM diagram step by step later.

For now, let’s just try to get comfortable with the notation we’ll be using.

For now, let’s just try to get comfortable with the notation we’ll be using.

11










In the above diagram, each line carries an entire vector, from the output of one node to the inputs of others.

In the above diagram, each line carries an entire vector, from the output of one node to the inputs of others.

The pink circles represent pointwise operations, like vector addition, while the yellow boxes are learned

The pink circles represent pointwise operations, like vector addition, while the yellow boxes are learned

neural network layers. Lines merging denote concatenation, while a line forking denote its content being

neural network layers. Lines merging denote concatenation, while a line forking denote its content being

copied and the copies going to different locations.

copied and the copies going to different locations.

The Core Idea Behind LSTMs

The key to LSTMs is the cell state, the horizontal line running through the top of the diagram.

The key to LSTMs is the cell state, the horizontal line running through the top of the diagram.

The cell state is kind of like a conveyor belt. It runs straight down the entire chain, with only some minor

The cell state is kind of like a conveyor belt. It runs straight down the entire chain, with only some minor

linear interactions. It’s very easy for information to just flow along it unchanged.

linear interactions. It’s very easy for information to just flow along it unchanged.



The LSTM does have the ability to remove or add information to the cell state, carefully regulated by

The LSTM does have the ability to remove or add information to the cell state, carefully regulated by

structures called gates.

structures called gates.

Gates are a way to optionally let information through. They are composed out of a sigmoid neural net layer

Gates are a way to optionally let information through. They are composed out of a sigmoid neural net layer

and a pointwise multiplication operation.

and a pointwise multiplication operation.



The sigmoid layer outputs numbers between zero and one, describing how much of each component should

The sigmoid layer outputs numbers between zero and one, describing how much of each component should

be let through. A value of zero means “let nothing through,” while a value of one means “let everything

be let through. A value of zero means “let nothing through,” while a value of one means “let everything

through!”

through!”

An LSTM has three of these gates, to protect and control the cell state.

An LSTM has three of these gates, to protect and control the cell state.

Step-by-Step LSTM Walk Through

The first step in our LSTM is to decide what information we’re going to throw away from the cell state. This

The first step in our LSTM is to decide what information we’re going to throw away from the cell state. This

decision is made by a sigmoid layer called the “forget gate layer.” It looks at

decision is made by a sigmoid layer called the “forget gate layer.” It looks at

ht−1 and

 and

xt, and outputs a number between

, and outputs a number between




0 and

 and

1 for each number in the cell state

 for each number in the cell state

Ct−1. A

. A

1 represents “completely keep this” while a

 represents “completely keep this” while a

0 represents “completely get rid of this.”

 represents “completely get rid of this.”

Let’s go back to our example of a language model trying to predict the next word based on all the previous

Let’s go back to our example of a language model trying to predict the next word based on all the previous

ones. In such a problem, the cell state might include the gender of the present subject, so that the correct

ones. In such a problem, the cell state might include the gender of the present subject, so that the correct

pronouns can be used. When we see a new subject, we want to forget the gender of the old subject.

pronouns can be used. When we see a new subject, we want to forget the gender of the old subject.



The next step is to decide what new information we’re going to store in the cell state. This has two parts.

The next step is to decide what new information we’re going to store in the cell state. This has two parts.

First, a sigmoid layer called the “input gate layer” decides which values we’ll update. Next, a tanh layer

First, a sigmoid layer called the “input gate layer” decides which values we’ll update. Next, a tanh layer

creates a vector of new candidate values,

creates a vector of new candidate values,

˜Ct, that could be added to the state. In the next step, we’ll combine these two to create an update to the

, that could be added to the state. In the next step, we’ll combine these two to create an update to the

state.

state.

In the example of our language model, we’d want to add the gender of the new subject to the cell state, to

In the example of our language model, we’d want to add the gender of the new subject to the cell state, to

replace the old one we’re forgetting.

replace the old one we’re forgetting.



It’s now time to update the old cell state,

It’s now time to update the old cell state,

Ct−1, into the new cell state

, into the new cell state

Ct. The previous steps already decided what to do, we just need to actually do it.

. The previous steps already decided what to do, we just need to actually do it.

We multiply the old state by

We multiply the old state by

ft, forgetting the things we decided to forget earlier. Then we add

, forgetting the things we decided to forget earlier. Then we add

it � ˜Ct. This is the new candidate values, scaled by how much we decided to update each state value.

. This is the new candidate values, scaled by how much we decided to update each state value.

In the case of the language model, this is where we’d actually drop the information about the old subject’s

In the case of the language model, this is where we’d actually drop the information about the old subject’s

gender and add the new information, as we decided in the previous steps.

gender and add the new information, as we decided in the previous steps.




Finally, we need to decide what we’re going to output. This output will be based on our cell state, but will

Finally, we need to decide what we’re going to output. This output will be based on our cell state, but will

be a filtered version. First, we run a sigmoid layer which decides what parts of the cell state we’re going to

be a filtered version. First, we run a sigmoid layer which decides what parts of the cell state we’re going to

output. Then, we put the cell state through

output. Then, we put the cell state through

tanh (to push the values to be between

 (to push the values to be between

−1 and

 and

1) and multiply it by the output of the sigmoid gate, so that we only output the parts we decided to.

) and multiply it by the output of the sigmoid gate, so that we only output the parts we decided to.

For the language model example, since it just saw a subject, it might want to output information relevant to

For the language model example, since it just saw a subject, it might want to output information relevant to

a verb, in case that’s what is coming next. For example, it might output whether the subject is singular or

a verb, in case that’s what is coming next. For example, it might output whether the subject is singular or

plural, so that we know what form a verb should be conjugated into if that’s what follows next.

plural, so that we know what form a verb should be conjugated into if that’s what follows next.



Variants on Long Short Term Memory

What I’ve described so far is a pretty normal LSTM. But not all LSTMs are the same as the above. In fact,

What I’ve described so far is a pretty normal LSTM. But not all LSTMs are the same as the above. In fact,

it seems like almost every paper involving LSTMs uses a slightly different version. The differences are minor,

it seems like almost every paper involving LSTMs uses a slightly different version. The differences are minor,

but it’s worth mentioning some of them.

but it’s worth mentioning some of them.

One popular LSTM variant, introduced by 

One popular LSTM variant, introduced by Gers &amp; Schmidhuber (2000)

Gers &amp; Schmidhuber (2000), is adding “peephole connections.”

, is adding “peephole connections.”

This means that we let the gate layers look at the cell state.

This means that we let the gate layers look at the cell state.








The above diagram adds peepholes to all the gates, but many papers will give some peepholes and not others.

The above diagram adds peepholes to all the gates, but many papers will give some peepholes and not others.

Another variation is to use coupled forget and input gates. Instead of separately deciding what to forget and

Another variation is to use coupled forget and input gates. Instead of separately deciding what to forget and

what we should add new information to, we make those decisions together. We only forget when we’re going

what we should add new information to, we make those decisions together. We only forget when we’re going

to input something in its place. We only input new values to the state when we forget something older.

to input something in its place. We only input new values to the state when we forget something older.



A slightly more dramatic variation on the LSTM is the Gated Recurrent Unit, or GRU, introduced by 

A slightly more dramatic variation on the LSTM is the Gated Recurrent Unit, or GRU, introduced by Cho,

Cho,

et al. (2014)

et al. (2014). It combines the forget and input gates into a single “update gate.” It also merges the cell state

. It combines the forget and input gates into a single “update gate.” It also merges the cell state

and hidden state, and makes some other changes. The resulting model is simpler than standard LSTM

and hidden state, and makes some other changes. The resulting model is simpler than standard LSTM

models, and has been growing increasingly popular.

models, and has been growing increasingly popular.



These are only a few of the most notable LSTM variants. There are lots of others, like Depth Gated RNNs by

These are only a few of the most notable LSTM variants. There are lots of others, like Depth Gated RNNs by

Yao, et al. (2015)

Yao, et al. (2015). There’s also some completely different approach to tackling long-term dependencies, like

. There’s also some completely different approach to tackling long-term dependencies, like

Clockwork RNNs by 

Clockwork RNNs by Koutnik, et al. (2014)

Koutnik, et al. (2014)..

Which of these variants is best? Do the differences matter? 

Which of these variants is best? Do the differences matter? Greff, et al. (2015)

Greff, et al. (2015) do a nice comparison of

 do a nice comparison of

popular variants, finding that they’re all about the same. 

popular variants, finding that they’re all about the same. Jozefowicz, et al. (2015)

Jozefowicz, et al. (2015) tested more than ten

 tested more than ten

thousand RNN architectures, finding some that worked better than LSTMs on certain tasks.

thousand RNN architectures, finding some that worked better than LSTMs on certain tasks.

Conclusion

Earlier, I mentioned the remarkable results people are achieving with RNNs. Essentially all of these are

Earlier, I mentioned the remarkable results people are achieving with RNNs. Essentially all of these are

achieved using LSTMs. They really work a lot better for most tasks!

achieved using LSTMs. They really work a lot better for most tasks!

Written down as a set of equations, LSTMs look pretty intimidating. Hopefully, walking through them step

Written down as a set of equations, LSTMs look pretty intimidating. Hopefully, walking through them step

by step in this essay has made them a bit more approachable.

by step in this essay has made them a bit more approachable.

LSTMs were a big step in what we can accomplish with RNNs. It’s natural to wonder: is there another big

LSTMs were a big step in what we can accomplish with RNNs. It’s natural to wonder: is there another big

step? A common opinion among researchers is: “Yes! There is a next step and it’s attention!” The idea is to

step? A common opinion among researchers is: “Yes! There is a next step and it’s attention!” The idea is to

let every step of an RNN pick information to look at from some larger collection of information. For example,

let every step of an RNN pick information to look at from some larger collection of information. For example,

if you are using an RNN to create a caption describing an image, it might pick a part of the image to look at

if you are using an RNN to create a caption describing an image, it might pick a part of the image to look at

for every word it outputs. In fact, 

for every word it outputs. In fact, Xu, 

Xu, et al.

et al. (2015)

 (2015) do exactly this – it might be a fun starting point if you

 do exactly this – it might be a fun starting point if you


Attention and

Augmented Recurrent

Neural Networks

On Distill



Conv Nets

A Modular Perspective



Neural Networks,

Manifolds, and

Topology



Deep Learning, NLP,

and Representations

want to explore attention! There’s been a number of really exciting results using attention, and it seems like

want to explore attention! There’s been a number of really exciting results using attention, and it seems like

a lot more are around the corner…

a lot more are around the corner…

Attention isn’t the only exciting thread in RNN research. For example, Grid LSTMs by 

Attention isn’t the only exciting thread in RNN research. For example, Grid LSTMs by Kalchbrenner, 

Kalchbrenner, et al.

et al.

(2015)

(2015) seem extremely promising. Work using RNNs in generative models – such as 

 seem extremely promising. Work using RNNs in generative models – such as Gregor, 

Gregor, et al.

et al. (2015)

 (2015),,

Chung, 

Chung, et al.

et al. (2015)

 (2015), or 

, or Bayer &amp; Osendorfer (2015)

Bayer &amp; Osendorfer (2015)  – also seems very interesting. The last few years have

– also seems very interesting. The last few years have

been an exciting time for recurrent neural networks, and the coming ones promise to only be more so!

been an exciting time for recurrent neural networks, and the coming ones promise to only be more so!

Acknowledgments

I’m grateful to a number of people for helping me better understand LSTMs, commenting on the

I’m grateful to a number of people for helping me better understand LSTMs, commenting on the

visualizations, and providing feedback on this post.

visualizations, and providing feedback on this post.

I’m very grateful to my colleagues at Google for their helpful feedback, especially 

I’m very grateful to my colleagues at Google for their helpful feedback, especially Oriol Vinyals

Oriol Vinyals, , Greg

Greg

Corrado

Corrado, , Jon Shlens

Jon Shlens, , Luke Vilnis

Luke Vilnis, and 

, and Ilya Sutskever

Ilya Sutskever. I’m also thankful to many other friends and colleagues

. I’m also thankful to many other friends and colleagues

for taking the time to help me, including 

for taking the time to help me, including Dario Amodei

Dario Amodei, and 

, and Jacob Steinhardt

Jacob Steinhardt. I’m especially thankful to

. I’m especially thankful to

Kyunghyun Cho

Kyunghyun Cho for extremely thoughtful correspondence about my diagrams.

 for extremely thoughtful correspondence about my diagrams.

Before this post, I practiced explaining LSTMs during two seminar series I taught on neural networks.

Before this post, I practiced explaining LSTMs during two seminar series I taught on neural networks.

Thanks to everyone who participated in those for their patience with me, and for their feedback.

Thanks to everyone who participated in those for their patience with me, and for their feedback.

11. . In addition to the original authors, a lot of people contributed to the modern LSTM. A non-

In addition to the original authors, a lot of people contributed to the modern LSTM. A non-

comprehensive list is: Felix Gers, Fred Cummins, Santiago Fernandez, Justin Bayer, Daan Wierstra,

comprehensive list is: Felix Gers, Fred Cummins, Santiago Fernandez, Justin Bayer, Daan Wierstra,

Julian Togelius, Faustino Gomez, Matteo Gagliolo, and 

Julian Togelius, Faustino Gomez, Matteo Gagliolo, and Alex Graves

Alex Graves..��

More Posts

74 Comments




Built by 

Built by Oinkina

Oinkina with 

 with Hakyll

Hakyll  using 

using Bootstrap

Bootstrap, , MathJax

MathJax, , Disqus

Disqus, , MathBox.js

MathBox.js, , Highlight.js

Highlight.js, , and 

and Footnotes.js

Footnotes.js..
















































































































