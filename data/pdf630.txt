
Latent Semantic Analysis

(Tutorial)

Alex Thomo

1

Eigenvalues and Eigenvectors

Let A be an n × n matrix with elements being real numbers. If x is an n-dimensional vector, then

the matrix-vector product Ax is well-deﬁned, and the result is again an n-dimensional vector. In

general, multiplication by a matrix changes the direction of a non-zero vector x, unless the vector

is special and we have that

Ax = λx,

for some scalar λ. In such a case, the multiplication by matrix A only stretches or contracts or

reverses vector x, but it does not change its direction. These special vectors and their correspond-

ing λ’s are called eigenvectors and eigenvalues of A. For diagonal matrices it is easy to spot the

eigenvalues and eigenvectors. For example matrix

A =





4

0

0

0

3

0

0

0

2





has eigenvalues and eigenvectors

λ1 = 4 with x1 =





1

0

0



 , λ2 = 3 with x2 =





0

1

0



 , and λ3 = 2 with x3 =





0

0

1



 .

We will see that the number of eigenvalues is n for an n × n matrix. Regarding eigenvectors, if

x is an eigenvector then so is ax for any scalar a. However, if we consider only one eigenvector for

each ax family, then there is a 1-1 correspondence of such eigenvectors to eigenvalues. Typically, we

consider eigenvectors of unit length.

Diagonal matrices are simple, the eigenvalues are the entries on the diagonal, and the eigenvectors

are their columns. For other matrices we ﬁnd the eigenvalues ﬁrst by reasoning as follows. If Ax = λx

then (A−λI)x = 0, where I is the identity matrix. Since x is non-zero, matrix A−λI has dependent

columns and thus its determinant |A − λI| must be zero. This gives us the equation |A − λI| = 0

whose solutions are the eigenvalues of A.

As an example let

A =

�

3

2

2

3

�

and A − λI =

�

3 − λ

2

2

3 − λ

�

Then the equation |A − λI| = 0 becomes (3 − λ)2 − 4 = 0 which has λ1 = 1 and λ2 = 5 as solutions.

For each of these eigenvalues the equation (A − λI)x = 0 can be used to ﬁnd the corresponding

eigenvectors, e.g.

A − λ1I =

� 2

2

2

2

�

yields x1 =

�

1

−1

�

, and A − λ2I =

� −2

2

2

−2

�

yields x2 =

� 1

1

�

.

1


In general, for an n × n matrix A, the determinant |A − λI| will give a polynomial of degree n

which has n roots. In other words, the equation |A − λI| = 0 will give n eigenvalues.

Let us create a matrix S with columns the n eigenvectors of A. We have that

AS

=

A[x1, . . . , xn]

=

Ax1 + . . . + Axn

=

λ1x1 + . . . + λnxn

=

[x1, . . . , xn]





λ1

...

λn



 .

=

SΛ,

where Λ is the above diagonal matrix with the eigenvalues of A along its diagonal. Now suppose

that the above n eigenvectors are linearly independent. This is true when the matrix has n distinct

eigenvalues. Then matrix S is invertible and by mutiplying both sides of AS = SΛ we have

A = SΛS−1.

So, we were able to “diagonalize” matrix A in terms of the diagonal matrix Λ spelling the eigenvalues

of A along its diagonal. This was possible because matrix S was invertible. When there are fewer

than n eigenvalues then it might happen that the diagonalization is not possible. In such a case the

matrix is “defective” having too few eigenvectors.

In this tutorial, for reasons to be clear soon we will be interested in symmetric matrices (A = AT ).

For n × n symmetric matrices it has been shown that that they always have real eigenvalues and

their eigenvectors are perpendicular. As such we have that

ST S =





xT

1

...

xT

n



 [x1, . . . , xn] =





1

...

1



 = I.

In other words, for symmetric matrices, S−1 is ST (which can be easily obtained) and we have

A = SΛST .

2


2

Singular Value Decomposition

Now let A be an m × n matrix with entries being real numbers and m &gt; n. Let us consider the

n × n square matrix B = AT A. It is easy to verify that B is symmetric; namely BT = (AT A)T =

AT (AT )T = AT A = B). It has been shown that the eigenvalues of such matrices (AT A) are real

non-negative numbers. Since they are non-negative we can write them in decreasing order as squares

of non-negative real numbers: σ2

1 ≥ . . . ≥ σ2

n. For some index r (possibly n) the ﬁrst r numbers

σ1, . . . , σr are positive whereas the rest are zero.

For the above eigenvalues, we know that the

corresponding eigenvectors x1, . . . , xr are perpendicular. Furthemore, we normalize them to have

length 1. Let

S1 = [x1, . . . , xr].

We create now the vectors y1 =

1

σ1 Ax1, . . . , yr =

1

σr Axr. These are perpendicular m-dimensional

vectors of length 1 (orthonormal vectors) because

yT

i yj

=

� 1

σ1

Axi

�T 1

σj

Axj

=

1

σiσj

xT

i AT Axj

=

1

σiσj

xT

i Bxj

=

1

σiσj

xT

i σ2

j xj

=

σj

σi

xT

i xj

is 0 for i ̸= j and 1 for i = j (since xT

i xj = 0 for i ̸= j and xT

i xi = 1). Let

S2 = [y1, . . . , yr].

We have

yT

j Axi = yT

j (σiyi) = σiyT

j yi,

which is 0 if i ̸= j, and σi if i = j. From this we have

ST

2 AS1 = Σ,

where Σ is the diagonal r × r matrix with σ1, . . . , σr along the diagonal. Observe that ST

2 is r × m,

A is m × n, and S1 is n × r, and thus the above matrix multiplication is well deﬁned.

Since S2 and S1 have orthonormal columns, S2ST

2 = Im×m and S1ST

1 = In×n, where Im×m and

In×n are the m × m and n × n identity matrices. Thus, by multiplying the above equality by S2 on

the left and S1 on the right, we have

A = S2ΣST

1 .

Reiterating, matrix Σ is diagonal and the values along the diagonal are σ1, . . . , σr, which are

called singular values. They are the square roots of the eigenvalues of AT A and thus completely

determined by A. The above decomposition of A into ST

2 AS1 is called singular value decomposition.

For the ease of notation, let us denote S2 by S and S1 by U (getting thus rid of the subscripts).

Then

A = SΣU T .

3


3

Latent Semantic Indexing

Latent Semantic Indexing (LSI) is a method for discovering hidden concepts in document data.

Each document and term (word) is then expressed as a vector with elements corresponding to these

concepts. Each element in a vector gives the degree of participation of the document or term in the

corresponding concept. The goal is not to describe the concepts verbally, but to be able to represent

the documents and terms in a uniﬁed way for exposing document-document, document-term, and

term-term similarities or semantic relationship which are otherwise hidden.

3.1

An Example

Suppose we have the following set of ﬁve documents

d1 : Romeo and Juliet.

d2 : Juliet: O happy dagger!

d3 : Romeo died by dagger.

d4 : “Live free or die”, that’s the New-Hampshire’s motto.

d5 : Did you know, New-Hampshire is in New-England.

and a search query: dies, dagger.

Clearly, d3 should be ranked top of the list since it contains both dies, dagger. Then, d2 and d4

should follow, each containing a word of the query. However, what about d1 and d5? Should they be

returned as possibly interesting results to this query? As humans we know that d1 is quite related

to the query. On the other hand, d5 is not so much related to the query. Thus, we would like d1 but

not d5, or diﬀerently said, we want d1 to be ranked higher than d5.

The question is: Can the machine deduce this? The answer is yes, LSI does exactly that. In this

example, LSI will be able to see that term dagger is related to d1 because it occurs together with

the d1’s terms Romeo and Juliet, in d2 and d3, respectively. Also, term dies is related to d1 and d5

because it occurs together with the d1’s term Romeo and d5’s term New-Hampshire in d3 and d4,

respectively. LSI will also weigh properly the discovered connections; d1 more is related to the query

than d5 since d1 is “doubly” connected to dagger through Romeo and Juliet, and also connected to

die through Romeo, whereas d5 has only a single connection to the query through New-Hampshire.

3.2

SVD for LSI

Formally let A be the m × n term-document matrix of a collection of documents. Each column of A

corresponds to a document. If term i occurs a times in document j then A[i, j] = a. The dimensions

of A, m and n, correspond to the number of words and documents, respectively, in the collection.

For our example, matrix A is:

romeo

juliet

happy

dagger

live

die

free

new-hampshire

d1

d2

d3

d4

d5

1

0

1

0

0

1

1

0

0

0

0

1

0

0

0

0

1

1

0

0

0

0

0

1

0

0

0

1

1

0

0

0

0

1

0

0

0

0

1

1

4


Observe that B = AT A is the document-document matrix. If documents i and j have b words

in common then B[i, j] = b. On the other hand, C = AAT is the term-term matrix. If terms i and

j occur together in c documents then C[i, j] = c. Clearly, both B and C are square and symmetric;

B is an m × m matrix, whereas C is an n × n matrix.

Now, we perform an SVD on A using matrices B and C as described in the previous section

A = SΣU T ,

where S is the matrix of the eigenvectors of B, U is the matrix of the eigenvectors of C, and Σ is

the diagonal matrix of the singular values obtained as square roots of the eigenvalues of B.

Matrix Σ for our example is calculated to be

Σ =





2.285

0

0

0

0

0

2.010

0

0

0

0

0

1.361

0

0

0

0

0

1.118

0

0

0

0

0

0.797





(For small SVD calculations, you can use the BlueBit calculator at http://www.bluebit.gr/matrix-

calculator). As you can see, the singular values along the diagonal of Σ are listed in descending order

of their magnitude.

Some of the singular values are “too small” and thus “negligible.” What really constitutes “too

small” is usually determined empirically. In LSI we ignore these small singular values and replace

them by 0. Let us say that we only keep k singular values in Σ. Then Σ will be all zeros except the

ﬁrst k entries along its diagonal. As such, we can reduce matrix Σ into Σk which is an k × k matrix

containing only the k singular values that we keep, and also reduce S and U T , into Sk and U T

k , to

have k columns and rows, respectively. Of course, all these matrix parts that we throw out would

have been zeroed anyway by the zeros in Σ. Matrix A is now approximated by

Ak = SkΣkU T

k .

Observe that since Sk, Σk, and U T

k are m × k, k × k, and k × n matrices, their product, Ak is again

an m × n matrix.

Intuitively, the k remaning ingredients of the eigenvectors in S and U correspond to k “hidden

concepts” where the terms and documents participate. The terms and documents have now a new

representation in terms of these hidden concepts. Namely, the terms are represented by the row

vectors of the m × k matrix

SkΣk,

whereas the documents by the column vectors the k × n matrix

ΣkU T

k .

Then the query is represented by the centroid of the vectors for its terms.

3.3

Completing the Example

Let us now fully develop the example we started with in this section. Suppose we set k = 2, i.e. we

will consider only the ﬁrst two singular values. Then we have

Σ2 =

�

2.285

0

0

2.010

�

5


romeo

juliet

happy

dagger

live

die

free

new-hampshire

S2 =





−0.396

0.280

−0.314

0.450

−0.178

0.269

−0.438

0.369

−0.264

−0.346

−0.524

−0.246

−0.264

−0.346

−0.326

−0.460





U T

2 =

� −0.311

−0.407

−0.594

−0.603

−0.143

0.363

0.541

0.200

−0.695

−0.229

�

The terms in the concept space are represented by the row vectors of S2 whereas the documents

by the column vectors of U T

2 . In fact we scale the (two) coordinates of these vectors by multiplying

with the corresponding singular values of Σ2 and thus represent the terms by the row vectors of

S2Σ2 and and the documents by the column vectors of Σ2U T

2 . Finally we have

romeo =

� −0.905

0.563

�

, juliet =

� −0.717

0.905

�

, happy =

� −0.407

0.541

�

, dagger =

� −1.001

0.742

�

,

live =

� −0.603

−0.695

�

, die =

� −1.197

−0.494

�

, free =

� −0.603

−0.695

�

, new-hampshire =

� −0.745

−0.925

�

,

and

d1 =

� −0.711

0.730

�

, d2 =

� −0.930

1.087

�

, d3 =

� −1.357

0.402

�

, d4 =

� −1.378

−1.397

�

, d5 =

� −0.327

−0.460

�

.

Now the query is represented by a vector computed as the centroid of the vectors for its terms.

In our example, the query is die, dagger and so the vector is

q =

� −1.197

−0.494

�

+

� −1.001

0.742

�

2

=

�

−1.099

0.124

�

.

In order to rank the documents in relation to query q we will use the cosine distance. In other

words, we will compute

di · q

|di||q|

where i ∈ [1, n] and then sort the results in descending order.

For our example, let us do this

geometrically. Based on Figure 1, the following interesting observations can be made.

1. Document d1 is closer to query q than d5. As a result d1 is ranked higher than d5. This

conforms to our human preference, both Romeo and Juliet died by a dagger.

2. Document d1 is slightly closer to q than d2. Thus the system is quite intelligent to ﬁnd out

that d1, containing both Romeo and Juliet, is more relevant to the query than d2 even though

d2 contains explicitly one of the words in the query while d1 does not. A human user would

probably do the same.

6


 0

juliet

dagger

romeo

happy

live, free

new-hamshire

die

d2

d1

d3

d5

d4

q

 0

juliet

dagger

romeo

happy

live, free

new-hamshire

die

d2

d1

d3

d5

d4

q

Figure 1: Geometric representation of documents d1, . . . , d5, their terms, and query q.

7

