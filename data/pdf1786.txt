


Published in

Towards Data Science



Oct 14, 2020

·

10 min read

·

Save

How to build a smart search engine (Part II)

Creating an intelligent search service in Python

All images by author

create a truly smart search engine

template code to achieve this on any dataset








An overview of the pipeline we will be creating in this post

1. Set-up; Preprocess and tokenize text

Some example records of the dataset (212k records in total)


2. Create word vectors; build a fastText model

Why word vectors? Why not BERT/GPT-3/[latest SOTA NLP model]?


Reviewing performance:

Most similar words to ‘m4’:

Most similar words to ‘m4’. The model understands the link to UK motorway naming. Higher scores indicate greater

similarity


Most similar words to ‘Yorkshire’:

Similarity scores for closest words to ‘Yorkshire’ higher scores indicate greater similarity

Most similar words to ‘RG9’:

The model knows that the RG9 postcode relates to the town of Henley

3. Apply BM25 to word vectors

A recap on the inner workings of BM25


Converting our word vectors into a document vector weighted using BM25

4. Create a super-fast search index with NMSLIB

NMSLIB:


Putting it all together; a smarter search engine:


‘flood defences’

122 times faster

4 times the size.

‘audit services NR2'. 


‘audit services in Norwic’:

In conclusion:

Notebook containing the data and code

SmartSearch






References:

How to build a search engine

6

Towards Data Science

Programming

Python

Artificial Intelligence

Search




Follow

Your home for data science. A Medium publication sharing concepts, ideas and codes.



Read more from Towards Data Science





